{"version":3,"sources":["redux/reducers/contact-reducer.ts","api/api.ts","components/common/modalDelete/ModalDelete.tsx","components/common/modalEdit/ModalEdit.tsx","components/Contacts.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["CONTACTS_ACTIONS_TYPES","instance","axios","create","baseURL","contactsAPI","get","id","delete","name","lastName","post","job","put","initialState","data","removeContactAC","type","REMOVE_CONTACT","addContactAC","ADD_CONTACT","updateContactAC","UPDATE_CONTACT","ModalDelete","props","Dialog","open","openDeleteModal","onClose","onCloseModalButtonClick","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","onDeleteButtonClick","autoFocus","ModalEdit","React","memo","useState","Name","setName","setLastName","addSaveHandler","useCallback","trim","editContact","openModal","CloseModal","nameModal","TextField","value","onChange","e","currentTarget","margin","label","fullWidth","variant","useStyles","makeStyles","table","minWidth","Contacts","classes","contacts","useSelector","state","contactReducer","setOpenDeleteModal","openAddModal","setOpenAddModal","openEditModal","setOpenEditModal","setId","dispatch","useDispatch","useEffect","a","res","contactsState","SET_CONTACT","console","log","deleteContact","getState","deleteContactTC","openDeleteModalHandler","handleClose","openAddModalHandler","AddNewContact","addCardTC","openEditModalHandler","updateContactTC","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","color","TableBody","length","map","contact","first_name","last_name","email","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","ct","newContact","avatar","find","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca13aab6.chunk.js","sourcesContent":["import {AppActionsType, AppRootStateType} from \"../store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {contactsAPI, ContactType, GetContactResponseType} from \"../../api/api\";\r\n\r\n\r\nenum CONTACTS_ACTIONS_TYPES {\r\n    SET_CONTACT = \"SET_CONTACT\",\r\n    REMOVE_CONTACT = \"REMOVE_CONTACT\",\r\n    ADD_CONTACT = \"ADD_CONTACT\",\r\n    UPDATE_CONTACT = \"UPDATE_CONTACT\",\r\n}\r\n\r\n\r\nconst initialState = {\r\n    data: [] as Array<ContactType>\r\n}\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const contactReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case CONTACTS_ACTIONS_TYPES.SET_CONTACT:\r\n            return {...state, ...action.contactsState}\r\n\r\n        case CONTACTS_ACTIONS_TYPES.REMOVE_CONTACT: {\r\n            return {...state, data: state.data.filter(ct => ct.id !== action.id)}\r\n        }\r\n        case CONTACTS_ACTIONS_TYPES.ADD_CONTACT:\r\n            const newContact: ContactType = {\r\n                id: +(action.id),\r\n                avatar: \"\",\r\n                email: \"efwefwfwef@e.com\",\r\n                first_name: action.name,\r\n                last_name: action.lastName\r\n            }\r\n            return {\r\n                ...state, data: [...state.data, newContact]\r\n            }\r\n        case CONTACTS_ACTIONS_TYPES.UPDATE_CONTACT:\r\n            const contact = state.data.find(ct => ct.id === action.id);\r\n            if (contact) {\r\n                contact.first_name = action.name;\r\n                contact.last_name = action.lastName;\r\n            }\r\n            return {...state, data: [...state.data]}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\nexport const setContactAC = (contactsState: GetContactResponseType) => (\r\n    {type: CONTACTS_ACTIONS_TYPES.SET_CONTACT, contactsState} as const)\r\n\r\nexport const removeContactAC = (id: number) => (\r\n    {type: CONTACTS_ACTIONS_TYPES.REMOVE_CONTACT, id} as const)\r\n\r\nexport const addContactAC = (name: string, lastName: string, id: number) => (\r\n    {type: CONTACTS_ACTIONS_TYPES.ADD_CONTACT, name, lastName, id} as const)\r\n\r\nexport const updateContactAC = (name: string, lastName: string, id: number) => (\r\n    {type: CONTACTS_ACTIONS_TYPES.UPDATE_CONTACT, id, name, lastName} as const)\r\n\r\n//thunk\r\nexport const fetchContactsTC = (): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            const res = await contactsAPI.getContacts()\r\n            dispatch(setContactAC(res.data))\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            // some code...\r\n        }\r\n    }\r\n\r\nexport const updateContactTC = (name: string, lastName: string, id: number): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch, getState) => {\r\n        try {\r\n            const res = await contactsAPI.updateContact(name, lastName, id)\r\n            dispatch(updateContactAC(res.data.name, res.data.job, id))\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n\r\n        } finally {\r\n            // some code...\r\n        }\r\n    }\r\nexport const addCardTC = (name: string, lastName: string): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch, getState) => {\r\n        try {\r\n            const res = await contactsAPI.createContact(name, lastName)\r\n            dispatch(addContactAC(res.data.name, res.data.job, +(res.data.id)))\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            // some code...\r\n        }\r\n    }\r\nexport const deleteContactTC = (id: number): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch, getState) => {\r\n        try {\r\n            const res = await contactsAPI.deleteContact(id)\r\n            dispatch(removeContactAC(id))\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            // some code...\r\n        }\r\n    }\r\n\r\n\r\n//types\r\n\r\n\r\nexport type CardsReducersActionTypes = ReturnType<typeof removeContactAC>\r\n    | ReturnType<typeof addContactAC>\r\n    | ReturnType<typeof updateContactAC>\r\n    | ReturnType<typeof setContactAC>\r\n\r\n\r\n","import axios from \"axios\"\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://reqres.in/api/\",\r\n})\r\n//API\r\nexport const contactsAPI = {\r\n    getContacts() {\r\n        return instance.get<GetContactResponseType>(\"users\")\r\n    },\r\n    deleteContact(id: number) {\r\n        return instance.delete(`users/${id}`)\r\n    },\r\n    createContact(name: string, lastName: string) {\r\n        return instance.post<CreateContactResponseType>(`users/`, {name: name, job: lastName})\r\n    },\r\n    updateContact(name: string, lastName: string, id: number) {\r\n        return instance.put<UpdateContactResponseType>(`users/${id}`, {name: name, job: lastName})\r\n    },\r\n}\r\n\r\n//types\r\nexport  type GetContactResponseType = {\r\n    page: number\r\n    per_page: number\r\n    total: number\r\n    total_pages: number\r\n    data: Array<ContactType>\r\n    support: SupportType\r\n}\r\ntype SupportType = { url: string, text: string }\r\n\r\nexport type ContactType = {\r\n    avatar: string\r\n    email: string\r\n    first_name: string\r\n    id: number\r\n    last_name: string\r\n}\r\n\r\nexport type CreateContactResponseType = {\r\n    createdAt: string\r\n    id: string\r\n    job: string\r\n    name: string\r\n}\r\nexport type UpdateContactResponseType = {\r\n    job: string\r\n    name: string\r\n    updatedAt: string\r\n}","import React, {useCallback, useEffect, useState} from \"react\"\r\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\r\n\r\n\r\ntype ModalDeletePropsType = {\r\n    onDeleteButtonClick: () => void\r\n    openDeleteModal: boolean\r\n    onCloseModalButtonClick: () => void\r\n    lastName: string\r\n}\r\n\r\nexport const ModalDelete = (props: ModalDeletePropsType) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Dialog\r\n                open={props.openDeleteModal}\r\n                onClose={props.onCloseModalButtonClick}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Delete\"}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        Do you really want to remove {props.lastName}?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={props.onDeleteButtonClick}>Delete</Button>\r\n                    <Button onClick={props.onCloseModalButtonClick} autoFocus>\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, useCallback, useState} from \"react\"\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    TextField\r\n} from \"@material-ui/core\";\r\n\r\ntype ModalEditPropsType = {\r\n    name?: string\r\n    lastName?: string\r\n\r\n    nameModal: string\r\n    openModal: boolean\r\n    CloseModal: () => void\r\n    editContact: (name: string, lastName: string) => void\r\n}\r\n\r\nexport const ModalEdit = React.memo((props: ModalEditPropsType) => {\r\n\r\n\r\n    const [Name, setName] = useState(props.name ? props.name : \"\")\r\n    const [lastName, setLastName] = useState(props.lastName ? props.lastName : \"\")\r\n\r\n\r\n    const onChangeAddNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n    const onChangeAddLastNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLastName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const addSaveHandler = useCallback(() => {\r\n        if (Name.trim() !== \"\") {\r\n            props.editContact(Name, lastName)\r\n            setLastName(\"\")\r\n\r\n        }\r\n    }, [props, Name, lastName])\r\n    return (\r\n        <div>\r\n            <Dialog open={props.openModal} onClose={props.CloseModal}>\r\n                <DialogTitle>{props.nameModal}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Please enter new Name, Last Name and phone\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        value={Name}\r\n                        onChange={onChangeAddNameHandler}\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                    />\r\n                    <TextField\r\n                        value={lastName}\r\n                        onChange={onChangeAddLastNameHandler}\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"Last Name\"\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                    />\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={addSaveHandler}>{props.nameModal}</Button>\r\n                    <Button onClick={props.CloseModal}>Cancel</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n})\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {addCardTC, deleteContactTC, fetchContactsTC, updateContactTC} from \"../redux/reducers/contact-reducer\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {ModalDelete} from \"./common/modalDelete/ModalDelete\";\r\nimport {ModalEdit} from \"./common/modalEdit/ModalEdit\";\r\nimport {ContactType} from \"../api/api\";\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nexport const Contacts = React.memo(() => {\r\n    const classes = useStyles();\r\n\r\n    const contacts = useSelector<AppRootStateType, Array<ContactType>>(state => state.contactReducer.data)\r\n    const [openDeleteModal, setOpenDeleteModal] = useState<boolean>(false);\r\n    const [openAddModal, setOpenAddModal] = useState<boolean>(false);\r\n    const [openEditModal, setOpenEditModal] = useState<boolean>(false);\r\n    const [id, setId] = useState<number>()\r\n    const [lastName, setLastName] = useState<string>(\"\")\r\n    const [name, setName] = useState<string>(\"\")\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchContactsTC())\r\n    }, [dispatch])\r\n\r\n\r\n    const deleteContact = useCallback(() => {\r\n        if (id) {\r\n            dispatch(deleteContactTC(id))\r\n        }\r\n\r\n        setOpenDeleteModal(false)\r\n    }, [dispatch, id])\r\n\r\n    const openDeleteModalHandler = useCallback((id: number, lastName: string) => {\r\n        setOpenDeleteModal(true);\r\n        setId(id)\r\n        setLastName(lastName)\r\n    }, [])\r\n\r\n    const handleClose = useCallback(() => {\r\n        setOpenDeleteModal(false);\r\n        setOpenAddModal(false)\r\n        setOpenEditModal(false)\r\n    }, []);\r\n\r\n\r\n    const openAddModalHandler = useCallback(() => {\r\n        setOpenAddModal(true)\r\n    }, [])\r\n\r\n    const AddNewContact = useCallback((name: string, lastName: string) => {\r\n        dispatch(addCardTC(name, lastName))\r\n        setOpenAddModal(false)\r\n    }, [dispatch])\r\n\r\n\r\n    const openEditModalHandler = useCallback((id: number, name: string, lastName: string) => {\r\n        setOpenEditModal(true)\r\n        setId(id)\r\n        setLastName(lastName)\r\n        setName(name)\r\n\r\n    }, [])\r\n\r\n    const editContact = useCallback((name: string, lastName: string) => {\r\n        if (id) {\r\n            dispatch(updateContactTC(name, lastName, id))\r\n        }\r\n        setOpenEditModal(false)\r\n    }, [dispatch, name, lastName, id])\r\n\r\n    return (\r\n\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"right\">Name</TableCell>\r\n                        <TableCell align=\"right\">Last Name</TableCell>\r\n                        <TableCell align=\"right\">E-mail</TableCell>\r\n\r\n                        <TableCell align=\"right\">Action\r\n                            <Button onClick={() => openAddModalHandler()} color={\"primary\"}>Add</Button>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {openEditModal && <ModalEdit\r\n                        name={name}\r\n                        lastName={lastName}\r\n                        nameModal={\"Edit\"}\r\n                        openModal={openEditModal}\r\n                        editContact={editContact}\r\n                        CloseModal={handleClose}\r\n\r\n                    />}\r\n                    {openDeleteModal && <ModalDelete\r\n                        openDeleteModal={openDeleteModal}\r\n                        onDeleteButtonClick={deleteContact}\r\n                        onCloseModalButtonClick={handleClose}\r\n                        lastName={lastName}\r\n                    />}\r\n                    {openAddModal && <ModalEdit\r\n                        nameModal={\"Add\"}\r\n                        editContact={AddNewContact}\r\n                        openModal={openAddModal}\r\n                        CloseModal={handleClose}\r\n\r\n                    />}\r\n                    {contacts.length === 0\r\n                        ? <div>\r\n                            <span>Contacts list is empty.</span>\r\n                        </div>\r\n\r\n                        : contacts.map((contact) => (\r\n                            <TableRow key={contact.id}>\r\n                                <TableCell align=\"right\">{contact.first_name}</TableCell>\r\n                                <TableCell align=\"right\">{contact.last_name}</TableCell>\r\n                                <TableCell align=\"right\">{contact.email}</TableCell>\r\n\r\n                                <TableCell align=\"right\">\r\n                                    <div>\r\n                                        <Button\r\n                                            onClick={() => openEditModalHandler(contact.id, contact.first_name, contact.last_name)}\r\n                                            color={\"primary\"}>\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button onClick={() => openDeleteModalHandler(contact.id, contact.last_name)}\r\n                                                color={\"secondary\"}>Delete</Button>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n})","import React from 'react';\nimport './App.css';\nimport {Contacts} from \"./components/Contacts\";\n\nfunction App() {\n\n\n    return (\n        <Contacts/>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {contactReducer, CardsReducersActionTypes} from \"./reducers/contact-reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\n const rootReducer = combineReducers({\r\n  contactReducer:contactReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer,composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType=CardsReducersActionTypes\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./redux/store\";\nimport {Provider} from \"react-redux\"\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}